package com.thg.accelerator.flatfish.entities;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "Users")
@SecondaryTables({
        @SecondaryTable(name = "Preferences")
})
public class UserEntity {

    @Id
    @Column(name = "user_id")
    private String userId;

    @Column(name = "Name")
    private String name;

    @Column(name = "Birthday")
    private String birthday;

    @Column(name = "Age")
    private long age;

    @Column(name = "Description")
    private String description;

    @Column(name = "UserGender")
    private String userGender;

    @Column(name = "Instagram")
    private String instagram;

    @Column(name = "BudgetMin", table = "Preferences")
    private long budgetMin;

    @Column(name = "BudgetMax", table = "Preferences")
    private long budgetMax;

    @Column(name = "AgeMin", table = "Preferences")
    private long ageMin;

    @Column(name = "AgeMax", table = "Preferences")
    private long ageMax;

    @Column(name = "Gender", table = "Preferences")
    private Gender gender;

<<<<<<< HEAD
    @OneToMany(mappedBy = "savedUser") // Update mappedBy attribute to reference savedUser
    private List<SavedProfileEntity> savedProfilesEntitiesList;
=======
    @Column(name = "Location1", table = "Preferences")
    private String location1;
>>>>>>> dev

    @Column(name = "Location2", table = "Preferences")
    private String location2;

    @Column(name = "Location3", table = "Preferences")
    private String location3;



    // TODO: May need a new constructor for when a UserDto w/o UserId comes in and needs its id generated by this class
}