package com.thg.accelerator.flatfish.entities;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "Users")
@SecondaryTables({
        @SecondaryTable(name = "Preferences")
})
public class UserEntity implements UserDetails {

    @Id
    @Column(name = "user_id")
    private String userId;

    @Column(name = "Name")
    private String name;

    @Column(name = "password")
    private String password;

    @Column(name = "Birthday")
    private String birthday;

    @Column(name = "Age")
    private long age;

    @Column(name = "Description")
    private String description;

    @Column(name = "UserGender")
    private String userGender;

    @Column(name = "Instagram")
    private String instagram;

    @Column(name = "picture")
    private String picture;

    @Column(name = "BudgetMin", table = "Preferences")
    private long budgetMin;

    @Column(name = "BudgetMax", table = "Preferences")
    private long budgetMax;

    @Column(name = "AgeMin", table = "Preferences")
    private long ageMin;

    @Column(name = "AgeMax", table = "Preferences")
    private long ageMax;

    @Column(name = "Gender", table = "Preferences")
    private Gender gender;

    @OneToMany(mappedBy = "savedUser") // Update mappedBy attribute to reference savedUser
    private List<SavedProfileEntity> savedProfilesEntitiesList;

    @Column(name = "Location1", table = "Preferences")
    private String location1;


    @Column(name = "Location2", table = "Preferences")
    private String location2;

    @Column(name = "Location3", table = "Preferences")
    private String location3;

    @Enumerated(value = EnumType.STRING)
    private Role role;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.name()));
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return userId;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }


    // TODO: May need a new constructor for when a UserDto w/o UserId comes in and needs its id generated by this class
}