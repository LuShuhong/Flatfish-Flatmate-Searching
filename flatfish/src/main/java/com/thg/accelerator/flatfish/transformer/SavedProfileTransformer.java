package com.thg.accelerator.flatfish.transformer;

import com.thg.accelerator.flatfish.dto.SavedProfileDto;
import com.thg.accelerator.flatfish.dto.UserDto;
import com.thg.accelerator.flatfish.entities.SavedProfileEntity;
import com.thg.accelerator.flatfish.entities.UserEntity;
import com.thg.accelerator.flatfish.repositories.UsersRepo;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;

public class SavedProfileTransformer {
    public static UsersRepo usersRepo;

    public SavedProfileTransformer(UsersRepo usersRepo) {
        this.usersRepo = usersRepo;
    }

    public static SavedProfileDto transformSavedProfileEntityToDto(SavedProfileEntity savedProfileEntity){
        return new SavedProfileDto(savedProfileEntity.getId(), savedProfileEntity.getSavingUser().getUserId(), savedProfileEntity.getSavedUser().getUserId());
    }

    public static SavedProfileEntity transformSavedProfileDtoToEntity(SavedProfileDto savedProfileDto, UsersRepo usersRepo){
        SavedProfileEntity savedProfileEntity = new SavedProfileEntity();
        // If the ID is generated by the database, you might not need to set it here
        UserEntity savingUser = usersRepo.findById(savedProfileDto.getUserId()).orElseThrow(() -> new EntityNotFoundException("User not found"));
        UserEntity savedUser = usersRepo.findById(savedProfileDto.getUserId()).orElseThrow(() -> new EntityNotFoundException("User not found"));
        savedProfileEntity.setSavingUser(savingUser);
        savedProfileEntity.setSavedUser(savedUser);

        return savedProfileEntity;
    }
}
